package TicTacToe;

import java.awt.Point;
import java.util.Vector;
import javax.swing.ImageIcon;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.awt.RenderingHints;
import java.io.IOException;
import java.awt.AWTException;
import java.awt.Color;
import java.util.Random;
import javax.swing.JOptionPane;



/**
 *
 * @author Hieu
 */
public class Play extends javax.swing.JFrame {
	 Random rand = new Random();
     private int r = rand.nextInt(255);
     private int g = rand.nextInt(255);
     private int b = rand.nextInt(255);
     private Color c1 = new Color(r, g, b);
     private Color c2 = new Color(r / 2, g / 2, b / 2);

    /**
     * Creates new form Play
     */
    public Play(String u1, String u2, Color c1, Color c2) {
        initComponents();
        setLocationRelativeTo(null);
        this.u1 = u1;
        this.u2 = u2;
        this.c1 = c1;
        this.c2 = c2;
        labelXO.setIcon(red);
        player.setText(u1);
        jPanel1.setBackground(c1);
        replayBtn.setBackground(c2);
        undoBtn.setBackground(c2);
        newGameBtn.setBackground(c2);
        exitBtn.setBackground(c2);
        pauseBtn.setBackground(c2);
        colorBtn.setBackground(c2);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        labelXO = new javax.swing.JLabel();
        player = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        undoBtn = new javax.swing.JButton();
        pauseBtn = new javax.swing.JButton();
        replayBtn = new javax.swing.JButton();
        newGameBtn = new javax.swing.JButton();
        exitBtn = new javax.swing.JButton();
        colorBtn = new javax.swing.JButton();
        chessBoard = new javax.swing.JPanel(){
            public void paintComponent(Graphics g){
                this.setOpaque(false);
                Graphics2D g2 = (Graphics2D) g;
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                //Paint the chessboard
                g.setColor(Color.orange);
                for(int r = 0;r<=Size;r++){
                    g.drawLine(XY, XY+r*Width, XY+Size*Width, XY+r*Width);
                }
                for(int c = 0;c<=Size;c++){
                    g.drawLine(XY+c*Width, XY, XY+c*Width, XY+Size*Width);
                }

                //Paint the locations that have points
                if(checked.size()==0) return;
                for(int p = 0;p<checked.size();p++){
                    if(user){
                        if(p%2!=0) {g2.setColor(Color.BLUE);labelXO.setIcon(red); player.setForeground(Color.RED); player.setText(u1);}
                        else{ g2.setColor(Color.RED);labelXO.setIcon(blue); player.setForeground(Color.BLUE); player.setText(u2);}
                    }else{
                        if(p%2==0){ g2.setColor(Color.RED);labelXO.setIcon(blue); player.setForeground(Color.BLUE); player.setText(u2);}
                        else{ g2.setColor(Color.BLUE);labelXO.setIcon(red); player.setForeground(Color.RED); player.setText(u1);}
                    }
                    g2.fillOval(XY+checked.get(p).x*Width+Width/6+1,XY+ checked.get(p).y*Width+Width/6+1, 2*Width/3, 2*Width/3);
                }
                //Check the cells that have points
                g.setColor(Color.black);
                g.drawRect(checked.get(checked.size()-1).x*Width+XY, checked.get(checked.size()-1).y*Width+XY, Width, Width);
                super.paintComponent(g);
            }
        };

        setDefaultCloseOperation(0);
        setTitle("Playing Tic Tac Toe");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 102));
        jPanel1.setMinimumSize(new java.awt.Dimension(0, 0));

        jLabel2.setFont(new java.awt.Font("Script MT Bold", 0, 24)); // NOI18N
        jLabel2.setText("Player:");

        player.setFont(new java.awt.Font("Script MT Bold", 1, 24)); // NOI18N
        player.setForeground(new java.awt.Color(255, 0, 0));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/sideimage.png"))); // NOI18N

        undoBtn.setBackground(new java.awt.Color(47, 238, 172));
        undoBtn.setFont(new java.awt.Font("Script MT Bold", 0, 18)); // NOI18N
        undoBtn.setForeground(new java.awt.Color(255, 255, 255));
        undoBtn.setText("Undo");
        undoBtn.setToolTipText("Undo the previous step");
        undoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoBtnActionPerformed(evt);
            }
        });

        pauseBtn.setBackground(new java.awt.Color(47, 238, 172));
        pauseBtn.setFont(new java.awt.Font("Script MT Bold", 0, 18)); // NOI18N
        pauseBtn.setForeground(new java.awt.Color(255, 255, 255));
        pauseBtn.setText("Pause");
        pauseBtn.setToolTipText("Pause the game");
        pauseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseBtnActionPerformed(evt);
            }
        });

        replayBtn.setBackground(new java.awt.Color(47, 238, 172));
        replayBtn.setFont(new java.awt.Font("Script MT Bold", 0, 18)); // NOI18N
        replayBtn.setForeground(new java.awt.Color(255, 255, 255));
        replayBtn.setText("Replay");
        replayBtn.setToolTipText("Replay the game with the same players");
        replayBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                replayBtnActionPerformed(evt);
            }
        });

        newGameBtn.setBackground(new java.awt.Color(47, 238, 172));
        newGameBtn.setFont(new java.awt.Font("Script MT Bold", 0, 18)); // NOI18N
        newGameBtn.setForeground(new java.awt.Color(255, 255, 255));
        newGameBtn.setText("New Game");
        newGameBtn.setToolTipText("New game with new players");
        newGameBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGameBtnActionPerformed(evt);
            }
        });

        exitBtn.setBackground(new java.awt.Color(47, 238, 172));
        exitBtn.setFont(new java.awt.Font("Script MT Bold", 0, 18)); // NOI18N
        exitBtn.setForeground(new java.awt.Color(255, 255, 255));
        exitBtn.setText("Exit");
        exitBtn.setToolTipText("Exit the game");
        exitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBtnActionPerformed(evt);
            }
        });

        colorBtn.setBackground(new java.awt.Color(47, 238, 172));
        colorBtn.setFont(new java.awt.Font("Script MT Bold", 0, 18)); // NOI18N
        colorBtn.setForeground(new java.awt.Color(255, 255, 255));
        colorBtn.setText("Change Color");
        colorBtn.setToolTipText("Change the background and button colors");
        colorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(player)
                    .addComponent(jLabel2)
                    .addComponent(pauseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(replayBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(exitBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(newGameBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(undoBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(colorBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(21, 21, 21))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(labelXO, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(labelXO, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(player)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(colorBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(undoBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(pauseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(replayBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16)
                        .addComponent(newGameBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(exitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        chessBoard.setBackground(new java.awt.Color(102, 255, 204));
        chessBoard.setForeground(new java.awt.Color(255, 0, 0));
        chessBoard.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                chessBoardMouseMoved(evt);
            }
        });
        chessBoard.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                try {
					chessBoardMouseClicked(evt);
				} catch (HeadlessException | IOException | AWTException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });

        javax.swing.GroupLayout chessBoardLayout = new javax.swing.GroupLayout(chessBoard);
        chessBoard.setLayout(chessBoardLayout);
        chessBoardLayout.setHorizontalGroup(
            chessBoardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 514, Short.MAX_VALUE)
        );
        chessBoardLayout.setVerticalGroup(
            chessBoardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(chessBoard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(chessBoard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBtnActionPerformed
        // TODO add your handling code here:
        int yesno = JOptionPane.YES_NO_OPTION;
        int yesno_result = JOptionPane.showConfirmDialog(this, "Would you like to exit the game?", "Exit", yesno);
        if (yesno_result == 0) {
            System.exit(0);
        }
    }//GEN-LAST:event_exitBtnActionPerformed

    private void chessBoardMouseClicked(java.awt.event.MouseEvent evt) throws HeadlessException, IOException, AWTException {//GEN-FIRST:event_chessBoardMouseClicked
        // TODO add your handling code here:
        if (isPause != true) {
            return;
        }

        Point p;
        //Check whether the point p is in the chessboard
        if ((column < Size && column >= 0) && (row < Size && row >= 0)) {
            p = new Point(column, row);
        } else {
            return;
        }

        if (!checked.contains(p)) {
            checked.add(p);
            point = new Point(p);
            column = -1;
            row = -1;
            chessBoard.repaint();

            if (test(user)) {
                String s = new String();
                if (user) {
                    s = u2;
                } else {
                    s = u1;
                }
                new ScreenCapture(this.getX(), this.getY(), this.getWidth(), this.getHeight());
                this.dispose();
                new End(s, u1, u2, c1, c2).setVisible(true);
            }

            if (checked.size() == 15 * 15) {
                this.dispose();
                new End("Both", u1, u2, c1, c2).setVisible(true);
            }

            user = !user;

        }
    }//GEN-LAST:event_chessBoardMouseClicked

    private void pauseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseBtnActionPerformed
        // TODO add your handling code here:
    	if (isPause = !isPause)
    		pauseBtn.setText("Pause");
    	else
    		pauseBtn.setText("Resume");
        
    }//GEN-LAST:event_pauseBtnActionPerformed

    private void replayBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_replayBtnActionPerformed
        // TODO add your handling code here:
        int yesno = JOptionPane.YES_NO_OPTION;
        int yesno_result = JOptionPane.showConfirmDialog(this, "Would you like to replay the game?", "Replay", yesno);
        if (yesno_result == 0) {
            this.dispose();
            new Play(u1, u2, c1, c2).setVisible(true);
        }

    }//GEN-LAST:event_replayBtnActionPerformed

    private void newGameBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGameBtnActionPerformed
        // TODO add your handling code here:
        int yesno = JOptionPane.YES_NO_OPTION;
        int yesno_result = JOptionPane.showConfirmDialog(this, "Would you like to start new game?", "New Game", yesno);
        if (yesno_result == 0) {
            this.dispose();
            new Start().setVisible(true);
        }
    }//GEN-LAST:event_newGameBtnActionPerformed

    private void chessBoardMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chessBoardMouseMoved
        // TODO add your handling code here:
        int dX = evt.getX();
        int dY = evt.getY();
        if (dY - Size < 0) {
            column = (dX - XY) / Width;
            row = -1 + (dY - XY) / Width;
            return;
        }

        if (dX - Size < 0) {
            column = -1 + (dX - XY) / Width;
            row = (dY - XY) / Width;
            return;
        }

        column = (dX - XY) / Width;
        row = (dY - XY) / Width;
        Point p = new Point(column, row);
        if (checked.contains(p)) {
            column = -1;
            row = -1;
        }

        chessBoard.repaint();
        chessBoard.validate();

    }//GEN-LAST:event_chessBoardMouseMoved

    private void colorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorBtnActionPerformed
        // TODO add your handling code here:
    	Random rand = new Random();
        int r = rand.nextInt(255);
        int g = rand.nextInt(255);
        int b = rand.nextInt(255);
    	Color c1 = new Color(r, g, b);
        Color c2 = new Color(r / 2, g / 2, b / 2);
        this.c1 = c1;
        this.c2 = c2;
        jPanel1.setBackground(c1);
        replayBtn.setBackground(c2);
        undoBtn.setBackground(c2);
        newGameBtn.setBackground(c2);
        exitBtn.setBackground(c2);
        pauseBtn.setBackground(c2);
        colorBtn.setBackground(c2);
    }//GEN-LAST:event_colorBtnActionPerformed

    private void undoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoBtnActionPerformed
        // TODO add your handling code here:
        if (checked.size() == 0) {
            return;
        }
        user = !user;
        checked.remove(checked.size() - 1);
        if (!user) {
            labelXO.setIcon(red);
            player.setText(u1);
        } else {
            labelXO.setIcon(blue);
            player.setText(u2);
        }

        chessBoard.repaint();
    }//GEN-LAST:event_undoBtnActionPerformed

    public boolean test(boolean user) {
        int n = 6;
        int ok = 0;
        int blockedHeaders = 0;
        int u; //u = 0 if user 1, u = 1 if user 2

        if (user) {
            u = 1;
        } else {
            u = 0;
        }

        //check the horizontal line
        for (int i = 1; i <= n; i++) {
            Point p = new Point(point.x + i, point.y);
            if (!(p.x < Size)) {
                break;
            }
            if (checked.contains(p) && checked.indexOf(p) % 2 == u) {
                ok++;
            }
            if ((checked.contains(p) && checked.indexOf(p) % 2 != u) || !checked.contains(p)) {
                if (checked.contains(p) && checked.indexOf(p) % 2 != u) {
                    blockedHeaders++;
                }
                //Face the competitor's point or blank cell
                break;
            }
        }
        for (int i = 1; i <= n; i++) {
            Point p = new Point(point.x - i, point.y);
            if (!(p.x >= 0)) {
                break;
            }
            if (checked.contains(p) && checked.indexOf(p) % 2 == u) {
                ok++;
            }
            if ((checked.contains(p) && checked.indexOf(p) % 2 != u) || !checked.contains(p)) {
                if (checked.contains(p) && checked.indexOf(p) % 2 != u) {
                    blockedHeaders++;
                }
                //Face the competitor's point or blank cell
                break;
            }
        }
        if (ok>= 4 && blockedHeaders != 2) {
            return true;
        }
        //Check the vertical line
        ok = 0;
        blockedHeaders = 0;
        for (int i = 1; i < n; i++) {
            Point p = new Point(point.x, point.y + i);
            if (!(p.y < Size)) {
                break;
            }
            if (checked.contains(p) && checked.indexOf(p) % 2 == u) {
                ok++;
            }
            if ((checked.contains(p) && checked.indexOf(p) % 2 != u) || !checked.contains(p)) {
                if (checked.contains(p) && checked.indexOf(p) % 2 != u) {
                    blockedHeaders++;
                }
                //Face the competitor's point or blank cell
                break;
            }
        }
        for (int i = 1; i < n; i++) {
            Point p = new Point(point.x, point.y - i);
            if (!(p.y >= 0)) {
                break;
            }
            if (checked.contains(p) && checked.indexOf(p) % 2 == u) {
                ok++;
            }
            if ((checked.contains(p) && checked.indexOf(p) % 2 != u) || !checked.contains(p)) {
                if (checked.contains(p) && checked.indexOf(p) % 2 != u) {
                    blockedHeaders++;
                }
               //Face the competitor's point or blank cell
                break;
            }
        }

        if (ok >= 4 && blockedHeaders != 2) {
            return true;
        }
        //Check the main diagonal line
        ok = 0;
        blockedHeaders = 0;
        for (int i = 1; i < n; i++) {
            Point p = new Point(point.x + i, point.y + i);
            //Check whether the point is outside the chessboard
            if (!(p.x >= 0 && p.x < Size && p.y >= 0 && p.y < Size)) {
                break;
            }
            if (checked.contains(p) && checked.indexOf(p) % 2 == u) {
                ok++;
            }
            if ((checked.contains(p) && checked.indexOf(p) % 2 != u) || !checked.contains(p)) {
                if (checked.contains(p) && checked.indexOf(p) % 2 != u) {
                    blockedHeaders++;
                }
                //Face the competitor's point or blank cell
                break;
            }
        }
        for (int i = 1; i < n; i++) {
            Point p = new Point(point.x - i, point.y - i);
            //Check whether the point is outside the chessboard
            if (!(p.x >= 0 && p.x < Size && p.y >= 0 && p.y < Size)) {
                break;
            }
            if (checked.contains(p) && checked.indexOf(p) % 2 == u) {
                ok++;
            }
            if ((checked.contains(p) && checked.indexOf(p) % 2 != u) || !checked.contains(p)) {
                if (checked.contains(p) && checked.indexOf(p) % 2 != u) {
                    blockedHeaders++;
                }
               //Face the competitor's point or blank cell
                break;
            }
        }
        if (ok >= 4 && blockedHeaders != 2) {
            return true;
        }
        //Check the sub diagonal line
        ok = 0;
        blockedHeaders = 0;
        for (int i = 1; i < n; i++) {
            Point p = new Point(point.x + i, point.y - i);
            //Check whether the point is outside the chessboard
            if (!(p.x >= 0 && p.x < Size && p.y >= 0 && p.y < Size)) {
                break;
            }
            if (checked.contains(p) && checked.indexOf(p) % 2 == u) {
                ok++;
            }
            if ((checked.contains(p) && checked.indexOf(p) % 2 != u) || !checked.contains(p)) {
                if (checked.contains(p) && checked.indexOf(p) % 2 != u) {
                    blockedHeaders++;
                }
               //Face the competitor's point or blank cell
                break;
            }
        }
        for (int i = 1; i < n; i++) {
            Point p = new Point(point.x - i, point.y + i);
            //Check whether the point is outside the chessboard
            if (!(p.x >= 0 && p.x < Size && p.y >= 0 && p.y < Size)) {
                break;
            }
            if (checked.contains(p) && checked.indexOf(p) % 2 == u) {
                ok++;
            }
            if ((checked.contains(p) && checked.indexOf(p) % 2 != u) || !checked.contains(p)) {
                if (checked.contains(p) && checked.indexOf(p) % 2 != u) {
                    blockedHeaders++;
                }
                //Face the competitor's point or blank cell
                break;
            }
        }
        if (ok >= 4 && blockedHeaders != 2)  return true;

        return false;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel chessBoard;
    private javax.swing.JButton colorBtn;
    private javax.swing.JButton exitBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel labelXO;
    private javax.swing.JButton newGameBtn;
    private javax.swing.JButton pauseBtn;
    private javax.swing.JLabel player;
    private javax.swing.JButton replayBtn;
    private javax.swing.JButton undoBtn;
    // End of variables declaration//GEN-END:variables

    private final ImageIcon red = new ImageIcon(getClass().getResource("/Images/playerx.png"));
    private final ImageIcon blue = new ImageIcon(getClass().getResource("/Images/playero.png"));
    private final String u1, u2;
    private final int XY = 20;
    private final int Width = 32;
    private final int Size = 15;
    private int column = -1;
    private int row = -1;
    private Point point = new Point();
    private boolean user = false;
    private Vector<Point> checked = new Vector<Point>();
    boolean isPause = true;

}
